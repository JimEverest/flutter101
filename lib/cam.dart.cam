import 'dart:convert';
import 'dart:io';

import 'package:camera/camera.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final cameras = await availableCameras();
  final firstCamera = cameras.first;
  runApp(MyApp(camera: firstCamera));
}

class MyApp extends StatelessWidget {
  final CameraDescription camera;

  const MyApp({Key? key, required this.camera}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Camera Demo',
      home: CameraScreen(camera: camera),
    );
  }
}

class CameraScreen extends StatefulWidget {
  final CameraDescription camera;

  const CameraScreen({Key? key, required this.camera}) : super(key: key);

  @override
  _CameraScreenState createState() => _CameraScreenState();
}

class _CameraScreenState extends State<CameraScreen> {
  late CameraController _controller;
  late Future<void> _initializeControllerFuture;

  @override
  void initState() {
    super.initState();
    _controller = CameraController(widget.camera, ResolutionPreset.medium);
    _initializeControllerFuture = _controller.initialize();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  Future<void> _takePictureAndUpload() async {
    try {
      await _initializeControllerFuture;

      // Take the picture and get the image data
      final XFile file = await _controller.takePicture();

      // Display the image on the screen
      setState(() {});

      // Encode the image data as a Base64 string
      final bytes = await file.readAsBytes();
      final base64Image = base64Encode(bytes);

      // // Send the image data to the server
      // final response = await http.post(
      //   Uri.parse('http://172.22.17.5:5000/predict'),
      //   body: {'image': base64Image},
      // );

      // Set the Content-Type header to application/json
      Map<String, String> headers = {'Content-Type': 'application/json'};
      // Build the request body
      Map<String, String> requestBody = {'image': base64Image};

      // Send the POST request to the Flask server
      http.Response response = await http.post(
          // Uri.parse('http://172.22.17.5:5000/predict'),
          Uri.parse('http://127.0.0.1:5000/predict'),
          headers: headers,
          body: jsonEncode(requestBody));

      // Parse the response JSON
      Map<String, dynamic> responseData = jsonDecode(response.body);

      int width = responseData['width'];
      int height = responseData['height'];

      // Display a success message
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('Upload successful'),
          content: Text(response.body),
          actions: [
            TextButton(
              child: Text('OK'),
              onPressed: () => Navigator.pop(context),
            ),
          ],
        ),
      );
    } catch (e) {
      // Display an error message
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('Upload failed'),
          content: Text('An error occurred while uploading the photo.'),
          actions: [
            TextButton(
              child: Text('OK'),
              onPressed: () => Navigator.pop(context),
            ),
          ],
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Camera')),
      body: FutureBuilder<void>(
        future: _initializeControllerFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            return Stack(
              children: [
                Positioned.fill(
                  child: CameraPreview(_controller),
                ),
                Positioned(
                  bottom: 16,
                  left: 16,
                  right: 16,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      FloatingActionButton(
                        child: Icon(Icons.camera_alt),
                        onPressed: _takePictureAndUpload,
                      ),
                    ],
                  ),
                ),
              ],
            );
          } else {
            return Center(child: CircularProgressIndicator());
          }
        },
      ),
    );
  }
}


// create a list with 10 numbers.



